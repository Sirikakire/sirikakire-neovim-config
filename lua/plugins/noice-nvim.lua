return {
  -- "folke/noice.nvim",
  -- dependencies = { "MunifTanjim/nui.nvim" },
  -- event = "VeryLazy",
  -- opts = {
  --   cmdline = {
  --     enabled = true, -- enables the Noice cmdline UI
  --     view = "cmdline", -- view for rendering the cmdline. Change to `cmdline` to get a classic cmdline at the bottom
  --     opts = {}, -- global options for the cmdline. See section on views
  --     format = {
  --       cmdline = { view = "cmdline", pattern = "^:", icon = "", lang = "vim" },
  --       search_down = { view = "cmdline", kind = "search", pattern = "^/", icon = " ", lang = "regex" },
  --       search_up = { view = "cmdline", kind = "search", pattern = "^%?", icon = " ", lang = "regex" },
  --       filter = { view = "cmdline", pattern = "^:%s*!", icon = "$", lang = "bash" },
  --       lua = { view = "cmdline", pattern = { view = "cmdline", "^:%s*lua%s+", "^:%s*lua%s*=%s*", "^:%s*=%s*" }, icon = "", lang = "lua" },
  --       help = { view = "cmdline", pattern = "^:%s*he?l?p?%s+", icon = "" },
  --       input = { view = "cmdline" }, -- Used by input()
  --     },
  --   },
  --   messages = {
  --     -- NOTE: If you enable messages, then the cmdline is enabled automatically.
  --     -- This is a current Neovim limitation.
  --     enabled = true, -- enables the Noice messages UI
  --     view = "mini", -- default view for messages
  --     view_error = "mini", -- view for errors
  --     view_warn = "mini", -- view for warnings
  --     view_history = "messages", -- view for :messages
  --     view_search = "virtualtext", -- view for search count messages. Set to `false` to disable
  --   },
  --   popupmenu = {
  --     enabled = true,-- enables the Noice popupmenu UI
  --     backend = "cmp", -- backend to use to show regular cmdline completions
  --     kind_icons = {}, -- set to `false` to disable icons
  --   },
  --   redirect = {
  --     view = "popup",
  --     filter = { event = "msg_show" },
  --   },
  --   commands = {
  --     history = {
  --       view = "split",
  --       opts = { enter = true, format = "details" },
  --       filter = {
  --         any = {
  --           { event = "mini" },
  --           { error = true },
  --           { warning = true },
  --           { event = "msg_show", kind = { "" } },
  --           { event = "lsp", kind = "message" },
  --         },
  --       },
  --     },
  --     last = {
  --       view = "popup",
  --       opts = { enter = true, format = "details" },
  --       filter = {
  --         any = {
  --           { event = "mini" },
  --           { error = true },
  --           { warning = true },
  --           { event = "msg_show", kind = { "" } },
  --           { event = "lsp", kind = "message" },
  --         },
  --       },
  --       filter_opts = { count = 1 },
  --     },
  --     errors = {
  --       view = "popup",
  --       opts = { enter = true, format = "details" },
  --       filter = { error = true },
  --       filter_opts = { reverse = true },
  --     },
  --     all = {
  --       view = "split",
  --       opts = { enter = true, format = "details" },
  --       filter = {},
  --     },
  --   },
  --   notify = {
  --     enabled = true,
  --     view = "mini",
  --   },
  --   lsp = {
  --     progress = {
  --       enabled = true,
  --       format = "lsp_progress",
  --       format_done = "lsp_progress_done",
  --       throttle = 1000 / 30, -- frequency to update lsp progress message
  --       view = "mini",
  --     },
  --     override = {
  --       ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
  --       ["vim.lsp.util.stylize_markdown"] = true,
  --       ["cmp.entry.get_documentation"] = true,
  --     },
  --     hover = {
  --       enabled = false,
  --       silent = true, -- set to true to not show a message if hover is not available
  --       view = nil, -- when nil, use defaults from documentation
  --       opts = {}, -- merged with defaults from documentation
  --     },
  --     signature = {
  --       enabled = false,
  --       auto_open = {
  --         enabled = true,
  --         trigger = true, -- Automatically show signature help when typing a trigger character from the LSP
  --         luasnip = true, -- Will open signature help when jumping to Luasnip insert nodes
  --         throttle = 50, -- Debounce lsp signature help request by 50ms
  --       },
  --       view = nil, -- when nil, use defaults from documentation
  --       opts = {}, -- merged with defaults from documentation
  --     },
  --     message = {
  --       enabled = true,
  --       view = "mini",
  --       opts = {},
  --     },
  --     documentation = {
  --       view = "hover",
  --       opts = {
  --         lang = "markdown",
  --         replace = true,
  --         render = "plain",
  --         format = { "{message}" },
  --         win_options = { concealcursor = "n", conceallevel = 3 },
  --       },
  --     },
  --   },
  --   markdown = {
  --     hover = {
  --       ["|(%S-)|"] = vim.cmd.help, -- vim help links
  --       ["%[.-%]%((%S-)%)"] = require("noice.util").open, -- markdown links
  --     },
  --     highlights = {
  --       ["|%S-|"] = "@text.reference",
  --       ["@%S+"] = "@parameter",
  --       ["^%s*(Parameters:)"] = "@text.title",
  --       ["^%s*(Return:)"] = "@text.title",
  --       ["^%s*(See also:)"] = "@text.title",
  --       ["{%S-}"] = "@parameter",
  --     },
  --   },
  --   health = {
  --     checker = false, -- Disable if you don't want health checks to run
  --   },
  --   smart_move = {
  --     enabled = true, -- you can disable this behaviour here
  --     excluded_filetypes = { "cmp_menu", "cmp_docs", "notify" },
  --   },
  --   presets = {
  --     bottom_search = true, -- use a classic bottom cmdline for search
  --     command_palette = false, -- position the cmdline and popupmenu together
  --     long_message_to_split = true, -- long messages will be sent to a split
  --     inc_rename = false, -- enables an input dialog for inc-rename.nvim
  --     lsp_doc_border = false, -- add a border to hover docs and signature help
  --   },
  --   throttle = 1000 / 30, -- how frequently does Noice need to check for ui updates? This has no effect when in blocking mode.
  --   routes = {
  --     {
  --       filter = {
  --         event = 'msg_show',
  --         any = {
  --           { find = 'Agent service not initialized' },
  --         },
  --       },
  --       opts = { skip = true },
  --     },
  --   },
  --   status = {}, --- @see section on statusline components
  --   format = {}, --- @see section on formatting
  -- }
}
